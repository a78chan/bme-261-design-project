#include <Servo.h>

// Binary digital input pin (expecting 0 or 1 values)
const int comparatorInput = A0;

Servo gripperDriver;

// Grip states
bool relaxedGrip = false;
bool looseGrip = false;
bool tightGrip = false;

// Servo position (0 to 47 degrees)
int angle = 0;

void setup() {
  pinMode(comparatorInput, INPUT);
  gripperDriver.attach(7);
  gripperDriver.write(0);  // Start at 0 degrees
  Serial.begin(9600);
}

void loop() {
  // Read binary input signals (0 or 1)
  float signalValue = analogRead(comparatorInput)*(5.0/1023.0);
  Serial.print("Signal Voltage (mV): ");  Serial.print(signalValue);
  Serial.print("\n");
  // Binary signal-based control logic
  if (signalValue > 2.5) {  // Binary HIGH (1)
    //Serial.println("Opening gripper (clockwise)");
    relaxedGrip = false;
    looseGrip = false;
    tightGrip = true;

  } else if (signalValue > 0) {  // Binary HIGH (1)
    //Serial.println("Closing gripper (counter-clockwise)");
    relaxedGrip = false;
    looseGrip = true;
    tightGrip = false;

  } else {
    //Serial.println("No movement (pause motor)");
    relaxedGrip = true;
    looseGrip = false;
    tightGrip = false;
  }

  // Control gripper angle based on logic
  if (looseGrip && angle > 0) {
    angle -= 3;
    Serial.print("Closing: Angle = "); Serial.println(angle);
  }
  else if (tightGrip && angle < 47) {
    angle += 3;
    Serial.print("Opening: Angle = "); Serial.println(angle);
  }

  // Send angle to servo
  gripperDriver.write(angle);
  delayMicroseconds(1);  // Small delay for signal stability
}
