#include <Servo.h>

// Binary digital input pins (expecting 0 or 1 values)
const int comparatorInput_relax = 2;
const int comparatorInput_open = 3;
const int comparatorInput_close = 4;

Servo gripperDriver;

// Grip states
bool relaxedGrip = false;
bool looseGrip = false;
bool tightGrip = false;

// Servo position (0 to 47 degrees)
int angle = 0;

void setup() {
  pinMode(comparatorInput_relax, INPUT);
  pinMode(comparatorInput_close, INPUT);
  pinMode(comparatorInput_open, INPUT);
  gripperDriver.attach(7);
  gripperDriver.write(0);  // Start at 0 degrees
  Serial.begin(9600);
}

void loop() {
  // Read binary input signals (0 or 1)
  int relaxSignal = digitalRead(comparatorInput_relax);
  int closeSignal = digitalRead(comparatorInput_close);
  int openSignal  = digitalRead(comparatorInput_open);
  Serial.print("Relaxed Signal: ");  Serial.print(relaxSignal);
  Serial.print("Closed Signal: ");   Serial.print(closeSignal);
  Serial.print("Opened Signal: ");   Serial.print(openSignal);

  // Binary signal-based control logic
  if (openSignal != 0) {  // Binary HIGH (1)
    Serial.println("Binary: 1 detected on OPEN — opening gripper");
    relaxedGrip = false;
    looseGrip = false;
    tightGrip = true;

  } else if (closeSignal != 0) {  // Binary HIGH (1)
    Serial.println("Binary: 1 detected on CLOSE — closing gripper");
    relaxedGrip = false;
    looseGrip = true;
    tightGrip = false;

  } else if (relaxSignal != 0) {  // Binary HIGH (1)
    Serial.println("Binary: 1 detected on RELAX — pausing movement");
    relaxedGrip = true;
    looseGrip = false;
    tightGrip = false;

  } else {
    Serial.println("All binary signals = 0 — default to relaxed");
    relaxedGrip = true;
    looseGrip = false;
    tightGrip = false;
  }

  // Control gripper angle based on logic
  if (looseGrip && angle > 0) {
    angle--;
    Serial.print("Closing: Angle = "); Serial.println(angle);
  }
  else if (tightGrip && angle < 47) {
    angle+;
    Serial.print("Opening: Angle = "); Serial.println(angle);
  }

  // Send angle to servo
  gripperDriver.write(angle);
  delayMicroseconds(200);  // Small delay for signal stability
}
